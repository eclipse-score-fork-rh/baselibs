<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="13.3">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>410</x>
      <y>170</y>
      <w>470</w>
      <h>400</h>
    </coordinates>
    <panel_attributes>score::result::Error
--
template&lt;Code&gt;
+ Error(Code code, std::string_view user_message)
+ Error(Code, std::string_view user_message, ErrorDomain const&amp;)

+ Message(): std::string_view
+ UserMessage(): std::string_view

+ operator==(Error const&amp;): bool
+ operator!=(Error const&amp;): bool
* operator*(): CodeType

--
+ using CodeType = std::uint32_t

- code_ CodeType
- user_message_: const std::string_view
- domain_: const score::result::ErrorDomain&amp;
--
Notes: Needs to be non-virtual since needs
to be returned by value.

Uses ADL of MakeError to get ErrorDomain on
first constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>120</x>
      <y>340</y>
      <w>240</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>template=T
score::Result</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>960</x>
      <y>330</y>
      <w>360</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>score::result::ErrorDomain
--
/+ Message(): std::string_view/
--
Notes: User provided Domain shall be constexpr
instantiated
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>610</y>
      <w>240</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>UserDefinedDomain1
--
using ErrorCode = UserDefinedErrorCode;
/+ Message(): std::string_view/

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>610</y>
      <w>240</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>UserDefinedDomain2
--

/+ Message(): std::string_view/

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>440</y>
      <w>140</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;120.0;80.0;10.0;80.0;10.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1070</x>
      <y>440</y>
      <w>180</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0;160.0;80.0;160.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>370</y>
      <w>110</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>540</y>
      <w>240</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>template=T,E
score::details::expected</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>380</y>
      <w>30</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>330</x>
      <y>360</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>70</x>
      <y>660</y>
      <w>690</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Free Functions
--
ara::log::LogStream&amp; operator&lt;&lt;(ara::log::LogStream&amp; out, const ::score::result::Error&amp; value);
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const ::score::result::Error&amp; value);

template&lt;Code&gt;
MakeUnexpected(Code, std::string_view): score::Result
--
Notes: MakeUnexpected uses ADL to resolve to correct MakeError
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>850</y>
      <w>520</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Free Functions
--
MakeError(UserDefinedErrorCode, std::string_view): score::Result::Error
MakeError(UserDefinedErrorCode1, std::string_view): score::Result::Error</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>760</y>
      <w>250</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>UserDefinedErrorCode
--
--
Notes: Enum of type
score::result::Error::CodeType</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>760</y>
      <w>250</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>UserDefinedErrorCode1
--
--
Notes: Enum of type
score::result::Error::CodeType</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>580</y>
      <w>520</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>780</x>
      <y>580</y>
      <w>20</w>
      <h>440</h>
    </coordinates>
    <panel_attributes>bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>840</x>
      <y>950</y>
      <w>370</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>User defined per possible error case</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>120</x>
      <y>0</y>
      <w>920</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Goals:
Of this design are to reduce duplicated code
at user side to perform proper error handling and logging.

By providing a Mixin (ErrorDomain) that translates the
user defined error codes to user defined messages.
All other logic (providing log messages, comperators)
are then already implemented in the Error.</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
