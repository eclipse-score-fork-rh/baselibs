' *******************************************************************************
' Copyright (c) 2025 Contributors to the Eclipse Foundation
'
' See the NOTICE file(s) distributed with this work for additional
' information regarding copyright ownership.
'
' This program and the accompanying materials are made available under the
' terms of the Apache License Version 2.0 which is available at
' https://www.apache.org/licenses/LICENSE-2.0
'
' SPDX-License-Identifier: Apache-2.0
' *******************************************************************************

@startuml

skinparam linetype ortho

skinparam legend {
  backgroundColor #White
  entrySeparator #White
}


legend top left
<#White,#White>|<#WhiteSmoke>| Frontend class |
|<#LightSteelBlue>      | Backend class |
end legend


set separator ::


class score::Result<T>


interface score::filesystem::IFileFactory


class score::result::ErrorCode <<typedef>>

score::result::ErrorCode <|-- score::json::Error


class score::result::ErrorDomain

score::result::ErrorDomain <|-- score::json::ErrorDomain


class score::memory::StringComparisonAdaptor


interface score::json::IJsonWriter {
  +ToFile(json_data: score::json::Object, file_path: score::cpp::string_view, file_factory: std::shared_ptr<score::filesystem::IFileFactory>): score::ResultBlank
  +ToFile(json_data: score::json::List, file_path: score::cpp::string_view, file_factory: std::shared_ptr<score::filesystem::IFileFactory>): score::ResultBlank
  +ToFile(json_data: score::json::Any, file_path: score::cpp::string_view, file_factory: std::shared_ptr<score::filesystem::IFileFactory>): score::ResultBlank
  +ToBuffer(json_data: score::json::Object): score::Result<std::string>
  +ToBuffer(json_data: score::json::List): score::Result<std::string>
  +ToBuffer(json_data: score::json::Any): score::Result<std::string>
}

score::json::IJsonWriter <|.. score::json::JsonWriter
score::json::IJsonWriter --> score::filesystem::IFileFactory : use
score::json::IJsonWriter --> score::json::Object : use
score::json::IJsonWriter --> score::json::List : use
score::json::IJsonWriter --> score::Result : use


class score::json::JsonWriter {
  +ToFile(json_data: score::json::Object, file_path: score::cpp::string_view, file_factory: std::shared_ptr<score::filesystem::IFileFactory>): score::ResultBlank
  +ToFile(json_data: score::json::List, file_path: score::cpp::string_view, file_factory: std::shared_ptr<score::filesystem::IFileFactory>): score::ResultBlank
  +ToFile(json_data: score::json::Any, file_path: score::cpp::string_view, file_factory: std::shared_ptr<score::filesystem::IFileFactory>): score::ResultBlank
  +ToBuffer(json_data: score::json::Object): score::Result<std::string>
  +ToBuffer(json_data: score::json::List): score::Result<std::string>
  +ToBuffer(json_data: score::json::Any): score::Result<std::string>
}

score::json::JsonWriter --> score::json::Error : use
score::json::JsonWriter --> score::json::JsonSerialize : use


interface score::json::IJsonParser {
  +FromFile(file_path: std::string_view): score::Result<Any>
  +FromBuffer(buffer: score::cpp::string_view): score::Result<Any>
}

score::json::IJsonParser <|.. score::json::JsonParser
score::json::IJsonParser --> score::Result : use


class score::json::JsonParser {
  +FromFile(file_path: std::string_view): score::Result<Any>
  +FromBuffer(buffer: score::cpp::string_view): score::Result<Any>
}

score::json::JsonParser --> score::json::VajsonParser : use
score::json::JsonParser --> score::json::NlohmannParser : use


class score::json::JsonSerialize #LightSteelBlue {
  +JsonSerialize(out_stream: std::ostream)
  +<T: typename>operator<<(json_data: T): score::ResultBlank
}

score::json::JsonSerialize --> score::json::Any : use
score::json::JsonSerialize --> score::json::Object : use
score::json::JsonSerialize --> score::json::List : use
score::json::JsonSerialize --> score::json::Null : use
score::json::JsonSerialize --> score::json::Error : use
score::json::JsonSerialize --> score::Result : use


enum amsr::json::ParserState #LightSteelBlue


enum amsr::json::JsonErrc #LightSteelBlue


class amsr::json::ParserResult <<typedef>> #LightSteelBlue


class amsr::json::v2::Parser #LightSteelBlue


class amsr::json::JsonData #LightSteelBlue

amsr::json::v2::Parser <|-- score::json::VajsonParser


class score::json::VajsonParser #LightSteelBlue {
  {static}+FromFile(file_path: std::string_view): score::Result<Any>
  {static}+FromBuffer(buffer: score::cpp::string_view): score::Result<Any>
}

score::json::VajsonParser *-- score::json::Any
score::json::VajsonParser --> score::json::Error : use
score::json::VajsonParser --> score::Result : use
score::json::VajsonParser --> amsr::json::ParserResult : use
score::json::VajsonParser --> amsr::json::ParserState : use
score::json::VajsonParser --> amsr::json::JsonErrc : use
score::json::VajsonParser --> amsr::json::JsonData : use


class score::json::NlohmannParser #LightSteelBlue {
  {static}+FromFile(file_path: std::string_view): score::Result<Any>
  {static}+FromBuffer(buffer: score::cpp::string_view): score::Result<Any>
}

score::json::NlohmannParser --> score::json::JsonBuilder : use
score::json::NlohmannParser --> score::json::Any : use
score::json::NlohmannParser --> nlohmann::json : use
score::json::NlohmannParser --> score::json::Error : use
score::json::NlohmannParser --> score::Result : use


class score::json::JsonBuilder #LightSteelBlue {
  +GetData(): score::Result<score::json::Any>
  +HandleEvent(event: nlohmann::json::parse_event_t, parsed: nlohmann::json): bool
}

score::json::JsonBuilder *-- score::json::Any
score::json::JsonBuilder --> nlohmann::json : use
score::json::JsonBuilder --> score::Result : use
score::json::JsonBuilder --> score::json::Error : use


class nlohmann::json <<typedef>> #LightSteelBlue

nlohmann::json *-- nlohmann::basic_json


class nlohmann::basic_json<     > #LightSteelBlue

nlohmann::basic_json --> nlohmann::detail::parse_event_t : use


enum nlohmann::detail::parse_event_t #LightSteelBlue


class score::json::Any {
  +<T: typename>Any(value: T)
  +Any CloneByValue()
  +<T: typename>As(): score::Result<T>
}

score::json::Any *--  score::json::Number
score::json::Any *--  score::json::Null
score::json::Any *--  score::json::Object
score::json::Any *--  score::json::List
score::json::Any --> score::Result : use
score::json::Any --> score::json::Error : use


class score::json::List <<typedef>>
score::json::List --> score::json::Any : use


class score::json::Object <<typedef>>
score::json::Object --> score::memory::StringComparisonAdaptor : use
score::json::Object --> score::json::Any : use


class score::json::Null


class score::json::ArithmeticType <<typedef>>


class score::json::Number {
  +Number(value: ArithmeticType)
  +<T: typename>As(): score::Result<T>
}

score::json::Number *-- score::json::ArithmeticType
score::json::Number --> score::json::VariantComparator : use
score::json::Number --> score::Result : use


class score::json::VariantComparator {
  +<T: typename>operator()(T: rhs): bool
}

score::json::VariantComparator *-- score::json::Number


enum score::json::Error {
  kUnknownError
  kWrongType
  kKeyNotFound
  kParsingError
  kInvalidFilePath
}


class score::json::ErrorDomain
score::json::ErrorDomain --> score::result::ErrorCode : use
score::json::ErrorDomain --> score::json::Error : use


@enduml
