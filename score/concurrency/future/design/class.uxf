<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.0.0">
  <help_text/>
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1608</x>
      <y>168</y>
      <w>642</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>score::concurrency::BaseInterruptibleFuture
--
#state_ptr_: std::shared_ptr&lt;InterruptibleState&lt;Value&gt;&gt;
--
+BaseInterruptibleFuture() noexcept
#BaseInterruptibleFuture(other_state_ptr: std::shared_ptr&lt;InterruptibleState&lt;Value&gt;&gt;) noexcept
+Valid() const noexcept: bool
+Wait(stop_token: score::cpp::stop_token const&amp;) const noexcept: score::cpp::expected_blank&lt;Error&gt;
+WaitFor(stop_token: score::cpp::stop_token const&amp;, rel_time: const std::chrono::duration&lt;Representation, Period&gt;&amp;) const noexcept: score::cpp::expected_blank&lt;Error&gt;
+WaitUntil(stop_token: score::cpp::stop_token const&amp;, abs_time: std::chrono::time_point&lt;Clock, Duration&gt; const&amp;) const noexcept: score::cpp::expected_blank&lt;Error&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2184</x>
      <y>156</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1590</x>
      <y>330</y>
      <w>300</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleFuture
--

--
+InterruptibleFuture() noexcept
-InterruptibleFuture(InterruptibleFuture&lt;Value&gt; const&amp;) noexcept
-operator=(InterruptibleFuture&lt;Value&gt; const&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(InterruptibleFuture&lt;Value&gt;&amp;&amp; other) noexcept
+operator=(InterruptibleFuture&lt;Value&gt;&amp;&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(state_ptr: std::shared_ptr&lt;InterruptibleState&lt;Value&gt;&gt;)
+Get(score::cpp::stop_token const&amp; stop_token) noexcept: score::Result&lt;Value&gt;
+Share(): InterruptibleSharedFuture&lt;Value&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1926</x>
      <y>264</y>
      <w>18</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1824</x>
      <y>318</y>
      <w>72</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1512</x>
      <y>510</y>
      <w>378</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleFuture
--

--
+InterruptibleFuture() noexcept
-InterruptibleFuture(InterruptibleFuture&lt;Value&gt; const&amp;) noexcept
-operator=(InterruptibleFuture&lt;Value&gt; const&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(InterruptibleFuture&lt;Value&gt;&amp;&amp; other) noexcept
+operator=(InterruptibleFuture&lt;Value&gt;&amp;&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(state_ptr: std::shared_ptr&lt;InterruptibleState&lt;Value&gt;&gt;)
+Get(score::cpp::stop_token const&amp; stop_token) noexcept: score::Result&lt;std::reference_wrapper&lt;Value&gt;&gt;
+Share(): InterruptibleSharedFuture&lt;Value&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1818</x>
      <y>498</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value&amp;: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1590</x>
      <y>720</y>
      <w>300</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleFuture
--

--
+InterruptibleFuture() noexcept
-InterruptibleFuture(InterruptibleFuture&lt;void&gt; const&amp;) noexcept
-operator=(InterruptibleFuture&lt;void&gt; const&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(InterruptibleFuture&lt;void&gt;&amp;&amp; other) noexcept
+operator=(InterruptibleFuture&lt;void&gt;&amp;&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(state_ptr: std::shared_ptr&lt;InterruptibleState&lt;void&gt;&gt;)
+Get(score::cpp::stop_token const&amp; stop_token) noexcept: score::ResultBlank
+Share(): InterruptibleSharedFuture&lt;void&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1884</x>
      <y>708</y>
      <w>18</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1968</x>
      <y>342</y>
      <w>378</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleSharedFuture
--

--
+InterruptibleFuture() noexcept
+InterruptibleFuture(InterruptibleFuture&lt;Value&gt; const&amp;) noexcept
+operator=(InterruptibleFuture&lt;Value&gt; const&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(InterruptibleFuture&lt;Value&gt;&amp;&amp; other) noexcept
+operator=(InterruptibleFuture&lt;Value&gt;&amp;&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(state_ptr: std::shared_ptr&lt;InterruptibleState&lt;Value&gt;&gt;)
+Get(score::cpp::stop_token const&amp; stop_token) noexcept: score::Result&lt;std::reference_wrapper&lt;Value&gt;&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2280</x>
      <y>330</y>
      <w>72</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1968</x>
      <y>516</y>
      <w>402</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleSharedFuture
--

--
+InterruptibleFuture() noexcept
+InterruptibleFuture(InterruptibleFuture&lt;Value&gt; const&amp;) noexcept
+operator=(InterruptibleFuture&lt;Value&gt; const&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(InterruptibleFuture&lt;Value&gt;&amp;&amp; other) noexcept
+operator=(InterruptibleFuture&lt;Value&gt;&amp;&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(state_ptr: std::shared_ptr&lt;InterruptibleState&lt;Value&gt;&gt;)
+Get(score::cpp::stop_token const&amp; stop_token) const noexcept: score::Result&lt;std::reference_wrapper&lt;Value&gt;&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2298</x>
      <y>504</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value&amp;: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1968</x>
      <y>720</y>
      <w>300</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleSharedFuture
--

--
+InterruptibleFuture() noexcept
+InterruptibleFuture(InterruptibleFuture&lt;void&gt; const&amp;) noexcept
+operator=(InterruptibleFuture&lt;void&gt; const&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(InterruptibleFuture&lt;void&gt;&amp;&amp; other) noexcept
+operator=(InterruptibleFuture&lt;void&gt;&amp;&amp;) noexcept: InterruptibleFuture&amp;
+InterruptibleFuture(state_ptr: std::shared_ptr&lt;InterruptibleState&lt;void&gt;&gt;)
+Get(score::cpp::stop_token const&amp; stop_token) noexcept: score::ResultBlank</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2262</x>
      <y>708</y>
      <w>18</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1926</x>
      <y>306</y>
      <w>258</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;410.0;10.0;410.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2166</x>
      <y>480</y>
      <w>240</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=.
Value = Value&amp;</panel_attributes>
    <additional_attributes>380.0;20.0;10.0;20.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2166</x>
      <y>684</y>
      <w>240</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=.
Value = void</panel_attributes>
    <additional_attributes>380.0;20.0;10.0;20.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1734</x>
      <y>684</y>
      <w>450</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=.
</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;20.0;730.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1734</x>
      <y>480</y>
      <w>450</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=.
</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;20.0;730.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>198</y>
      <w>750</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>score::concurrency::BaseInterruptibleState
--
-state_: std::atomic&lt;State&gt;
-state_mutex_: mutable std::mutex
-state_conditional_variable_: CV
--
+BaseInterruptibleState()
+BaseInterruptibleState(cv: CV&amp;)
-BaseInterruptibleState(BaseInterruptibleState const&amp;)
-operator=(BaseInterruptibleState const&amp;): BaseInterruptibleState&amp;
+BaseInterruptibleState(BaseInterruptibleState&amp;&amp;)
+operator=(BaseInterruptibleState&amp;&amp;) noexcept: BaseInterruptibleState&amp;
+SetStateOnce(State state) noexcept: void
+GetState() const noexcept: State
-WaitByCallback(callback: score::cpp::callback&lt;bool(std::unique_lock&lt;std::mutex&gt;&amp;, score::cpp::callback&lt;bool()&gt;)&gt;, stop_token: score::cpp::stop_token const&amp;) const noexcept: score::cpp::expected_blank&lt;Error&gt;
+Wait(stop_token: score::cpp::stop_token const&amp;) const noexcept: score::cpp::expected_blank&lt;Error&gt;
+WaitFor(stop_token: score::cpp::stop_token const&amp;, rel_time: const std::chrono::duration&lt;Representation, Period&gt;&amp;) const noexcept: score::cpp::expected_blank&lt;Error&gt;
+WaitUntil(stop_token: score::cpp::stop_token const&amp;, abs_time: std::chrono::time_point&lt;Clock, Duration&gt; const&amp;) const noexcept: score::cpp::expected_blank&lt;Error&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>678</x>
      <y>186</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
CV: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>126</x>
      <y>102</y>
      <w>108</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
score::concurrency::State
--
+kUnset
+kReady
+kBroken</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>168</x>
      <y>156</y>
      <w>42</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>306</x>
      <y>480</y>
      <w>234</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleState
--
-value_: score::Result&lt;Value&gt;
--
+SetValueOnce(value: Value&amp;&amp;) noexcept: void
+SetValueOnce(value: Value const&amp;) noexcept: void
+SetErrorOnce(error: score::result::Error) noexcept: void
+GetValue() noexcept: score::Result&lt;Value&gt;&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>366</y>
      <w>228</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
CV = score::concurrency::InterruptibleConditionalVariable</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>498</x>
      <y>468</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>306</x>
      <y>618</y>
      <w>270</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleState
--
-value_: score::Result&lt;std::reference_wrapper&lt;Value&gt;&gt;
--
+SetValueOnce(value: Value&amp;) noexcept: void
+SetErrorOnce(error: score::result::Error) noexcept: void
+GetValue() noexcept: score::Result&lt;std::reference_wrapper&lt;Value&gt;&gt;&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>498</x>
      <y>606</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value&amp;: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>420</y>
      <w>72</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>100.0;100.0;100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>282</x>
      <y>576</y>
      <w>150</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=.
Value = Value&amp;</panel_attributes>
    <additional_attributes>230.0;70.0;230.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>306</x>
      <y>810</y>
      <w>234</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleState
--

--
+SetErrorOnce(error: score::result::Error) noexcept: void
+GetValue() noexcept: score::ResultBlank&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>534</x>
      <y>798</y>
      <w>18</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>282</x>
      <y>774</y>
      <w>156</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=.
Value = void</panel_attributes>
    <additional_attributes>10.0;20.0;240.0;20.0;240.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2166</x>
      <y>306</y>
      <w>240</w>
      <h>402</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;380.0;10.0;380.0;650.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1746</x>
      <y>306</y>
      <w>198</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>310.0;10.0;10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>438</y>
      <w>1194</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;150.0;1530.0;150.0;1530.0;50.0;1970.0;50.0;1970.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>438</y>
      <w>1650</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;170.0;1550.0;170.0;1550.0;70.0;2730.0;70.0;2730.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>618</y>
      <w>1158</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;80.0;1910.0;80.0;1910.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>612</y>
      <w>1614</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;110.0;2670.0;110.0;2670.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>828</y>
      <w>1194</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;50.0;1970.0;50.0;1970.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>816</y>
      <w>1650</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;90.0;2730.0;90.0;2730.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1884</x>
      <y>390</y>
      <w>96</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>140.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1884</x>
      <y>552</y>
      <w>96</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>140.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1884</x>
      <y>762</y>
      <w>96</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>140.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>804</x>
      <y>264</y>
      <w>750</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>score::concurrency::BaseInterruptiblePromise
--
-future_retrieved_: std::atomic_flag
#state_: std::shared_ptr&lt;InterruptibleState&lt;Value&gt;
--
+BaseInterruptiblePromise()
+BaseInterruptiblePromise(other: BaseInterruptiblePromise&lt;Value&gt;&amp;&amp;) noexcept
+operator=(other: BaseInterruptiblePromise&lt;Value&gt;&amp;&amp;) noexcept: BaseInterruptiblePromise&lt;Value&gt;&amp;
-BaseInterruptiblePromise(BaseInterruptiblePromise&lt;Value&gt; const&amp;) noexcept
-BaseInterruptiblePromise&lt;Value&gt;&amp; operator=(BaseInterruptiblePromise&lt;Value&gt; const&amp;) noexcept
+GetInterruptibleFuture() noexcept: score::cpp::expected&lt;InterruptibleFuture&lt;Value&gt;, Error&gt;
+SetError(error: score::result::Error) noexcept: score::cpp::expected_blank&lt;Error&gt; </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1488</x>
      <y>252</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>282</x>
      <y>582</y>
      <w>18</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;340.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>282</x>
      <y>420</y>
      <w>96</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0;10.0;280.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>948</x>
      <y>438</y>
      <w>300</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptiblePromise
--
-value_: score::Result&lt;Value&gt;
--
+SetValue(value: Value&amp;&amp;) noexcept: score::cpp::expected&lt;Error&gt;
+SetValue(value: Value const&amp;) noexcept: score::cpp::expected&lt;Error&gt;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1188</x>
      <y>426</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>948</x>
      <y>576</y>
      <w>276</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleState
--
-value_: score::Result&lt;std::reference_wrapper&lt;Value&gt;&gt;
--
+SetValue(value: Value&amp;) noexcept: score::cpp::expected&lt;Error&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1158</x>
      <y>564</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
Value&amp;: typename</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1002</x>
      <y>390</y>
      <w>72</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>100.0;80.0;100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>924</x>
      <y>546</y>
      <w>150</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=.
Value = Value&amp;</panel_attributes>
    <additional_attributes>230.0;50.0;230.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>948</x>
      <y>714</y>
      <w>234</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>score::concurrency::InterruptibleState
--

--
+SetValue() noexcept: score::cpp::expected&lt;Error&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1176</x>
      <y>702</y>
      <w>18</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.
bg=white
transparency=0
layer=2
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>924</x>
      <y>690</y>
      <w>156</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=.
Value = void</panel_attributes>
    <additional_attributes>10.0;20.0;240.0;20.0;240.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>924</x>
      <y>522</y>
      <w>18</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;300.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>924</x>
      <y>390</y>
      <w>96</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1002</x>
      <y>366</y>
      <w>18</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>480</y>
      <w>426</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>690.0;10.0;350.0;10.0;350.0;60.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>468</y>
      <w>210</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;60.0;330.0;60.0;330.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>726</x>
      <y>468</y>
      <w>234</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;370.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>618</y>
      <w>390</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>630.0;10.0;290.0;10.0;290.0;60.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>606</y>
      <w>174</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;60.0;270.0;60.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>726</x>
      <y>606</y>
      <w>234</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;370.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>768</y>
      <w>426</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>690.0;10.0;350.0;10.0;350.0;130.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>726</x>
      <y>756</y>
      <w>234</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;370.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>534</x>
      <y>756</y>
      <w>210</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;130.0;330.0;130.0;330.0;10.0</additional_attributes>
  </element>
</diagram>
