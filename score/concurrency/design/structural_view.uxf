<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>265</y>
      <w>300</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>score::concurrency::DerivableExecutor
template=ExecutorType
--
--
+ DerivableExecutor(score::cpp::pmr::memory_resource*)
+ post(score::cpp::pmr::unique_ptr&lt;Task&gt; task): void

   template&lt;class CallableType, class... ArgumentTypes&gt;
+ post(CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): void

   template&lt;class CallableType, class... ArgumentTypes&gt;
+ submit(CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): auto


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>375</y>
      <w>300</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>score::concurrency::ThreadPool
--
std::vector&lt;score::cpp::jthread&gt; pool{}
score::cpp::pmr::deque&lt;score::cpp::pmr::unique_ptr&lt;Task&gt; &gt; taskPool{};
--
+ ThreadPool(numberOfThreads: std::size_t)
+ ThreadPool(numberOfThreads: size_t, score::cpp::pmr::memory_resource*)

# enqueue(score::cpp::pmr::unique_ptr&lt;Task&gt; task): void
+ maxConcurrencyLevel() const noexcept: std::size_t
+ shutdownRequested() const noexcept: bool
+ shutdown() noexcept: void

--
Notes:
Only Move, no Copy.
enqueue needs to be thread-safe




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>285</x>
      <y>355</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>0</y>
      <w>385</w>
      <h>255</h>
    </coordinates>
    <panel_attributes>score::concurrency::Executor
--
# memory_resource_: score::cpp::pmr::memory_resource*
--
+ Executor(score::cpp::pmr::memory_resource*)
+ virtual ~Executor() noexcept = default

/# enqueue(score::cpp::pmr::unique_ptr&lt;Task&gt; task): void/
/+ maxConcurrencyLevel() const noexcept: std::size_t/
/+ shutdownRequested() const noexcept: bool/
/+ shutdown() noexcept: void/

+ post(score::cpp::pmr::unique_ptr&lt;Task&gt; task): void

   template&lt;class CallableType, class... ArgumentTypes&gt;
+ post(CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): void

   template&lt;class CallableType, class... ArgumentTypes&gt;
+ submit(CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): auto

    template&lt;class ExecutorType, class CallableType, class... ArgumentTypes&gt;
_# do_post(ExecutorType&amp; executor, CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): void_

    template&lt;class ExecutorType, class CallableType, class... ArgumentTypes&gt;
_# do_submit(ExecutorType&amp; executor, CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): auto_

--
Notes:
By enforcing that CallableTypes first argument
is an score::cpp::stop_token, we can signal the user
that he needs to think abouth how his thread can
be stopped gracefully.

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>530</x>
      <y>90</y>
      <w>105</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
enqueues</panel_attributes>
    <additional_attributes>10.0;20.0;190.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>285</x>
      <y>250</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>230</x>
      <y>550</y>
      <w>100</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>score::cpp::jthread
--
--
Notes:
Custom implementation of
std::jthread (only C++20)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>635</x>
      <y>0</y>
      <w>110</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>score::cpp::stop_token
--
--
Notes:
Custom implementation of
std::stop_token (only C++20)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>530</x>
      <y>15</y>
      <w>115</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
checks for</panel_attributes>
    <additional_attributes>10.0;20.0;210.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>275</x>
      <y>500</y>
      <w>45</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
manages
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>650</x>
      <y>545</y>
      <w>255</w>
      <h>185</h>
    </coordinates>
    <panel_attributes>bg=yellow
Example:

std::shared_ptr&lt;Executor&gt; unit = std::make_shared&lt;ThreadPool&gt;(5);

# Will not compile, with static_assert failure
unit-&gt;post([](){
   std::cout &lt;&lt; "Some work..." &lt;&lt; std::endl;
});

unit-&gt;post([](const score::cpp::stop_token&amp; stop){
   while(!stop.stop_requested()) {
      std::cout &lt;&lt; "Some work..." &lt;&lt; std::endl;
   }
});

auto result = unit-&gt;submit([](const score::cpp::stop_token&amp;) -&gt; int {
   return 42;
});

std::cout &lt;&lt; result.get() &lt; std::endl;

unit-&gt;shutdown();
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>625</x>
      <y>75</y>
      <w>170</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>/score::concurrency::Task/
--
--
/+ operator()(const score::cpp::stop_token): void/
/+ GetStopSource(): score::cpp::stop_source&amp;/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1420</x>
      <y>185</y>
      <w>420</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>score::concurrency::SimpleTaskFactory
--
--
_template&lt;Clock, LocalCallableType, Arguments...&gt;_
_+ Make(score::cpp::pmr::memory_resource*, CallableType&amp;&amp;, Arguments&amp;&amp;...)_
_    : score::cpp::pmr::unique_ptr&lt;SimpleTask&gt;_
_template&lt;Clock, LocalCallableType, Arguments...&gt;_
_+ MakeWithTaskResult(score::cpp::pmr::memory_resource*, CallableType&amp;&amp;, Arguments&amp;&amp;...)_
_    : std::pair&lt;TaskResult&lt;std::result_of_t&lt;CallableType&amp;&amp;(Arguments&amp;&amp;)&gt;&gt;, score::cpp::pmr::unique_ptr&lt;SimpleTask&gt; &gt;_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>110</y>
      <w>15</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0;10.0;20.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>595</x>
      <y>340</y>
      <w>445</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>score::concurrency::PeriodicTask
template=Clock, CallableType
--
Note: Not Copyable, Movable</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1010</x>
      <y>165</y>
      <w>355</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>score::concurrency::SimpleTask
template=CallableType, ResultType
--
--
template&lt;LocalCallableType&gt;
+ SimpleTask(ConstructionGuard, std::promise&lt;auto&gt;&amp;&amp;, LocalCallableType&amp;&amp;)
+ operator()(Executor&amp;, const score::cpp::stop_token): void
+ GetStopSource(): score::cpp::stop_source&amp;
--
Note: Not Copyable, Movable</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>595</x>
      <y>150</y>
      <w>400</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>/score::concurrency::SimpleTaskBase/
template=CallableType, ResultType
--
--
template&lt;LocalCallableType&gt;
+ SimpleTask(ConstructionGuard, std::promise&lt;auto&gt;&amp;&amp;, LocalCallableType&amp;&amp;)
/+ operator()(const score::cpp::stop_token): void/
+ GetStopSource(): score::cpp::stop_source&amp;
--
Note: Not Copyable, Movable</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>940</x>
      <y>190</y>
      <w>80</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;70.0;80.0;70.0;80.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1310</x>
      <y>195</y>
      <w>120</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;create&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0;130.0;80.0;220.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1010</x>
      <y>250</y>
      <w>355</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>score::concurrency::SimpleTask
template=CallableType
--
--
template&lt;LocalCallableType&gt;
+ SimpleTask(ConstructionGuard, std::promise&lt;auto&gt;&amp;&amp;, LocalCallableType&amp;&amp;)
+ operator()(Executor&amp;, const score::cpp::stop_token): void
+ GetStopSource(): score::cpp::stop_source&amp;
--
Note: Not Copyable, Movable</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>975</x>
      <y>220</y>
      <w>75</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=.
ResultType=void</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;70.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1330</x>
      <y>240</y>
      <w>100</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;create&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;90.0;90.0;90.0;90.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>340</y>
      <w>585</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>score::concurrency::PeriodicTaskFactory
--
--
_template&lt;Clock, LocalCallableType, Arguments...&gt;_
_+ Make(score::cpp::pmr::memory_resource*, Executor&amp;, std::promise&lt;void&gt;&amp;&amp;, Clock::time_point,_Clock::duration, CallableType&amp;&amp;, Arguments&amp;&amp;...)_
_    : score::cpp::pmr::unique_ptr&lt;PeriodicTask&lt;Clock&gt; &gt;_

_template&lt;Clock, LocalCallableType, Arguments...&gt;_
_+ MakeWithTaskResult(score::cpp::pmr::memory_resource*, Executor&amp;, std::promise&lt;void&gt;&amp;&amp;, Clock::time_point, Clock::duration, CallableType&amp;&amp;, Arguments&amp;&amp;...)_
_    : std::pair&lt;TaskResult&lt;void&gt;, score::cpp::pmr::unique_ptr&lt;PeriodicTask&lt;Clock&gt; &gt; &gt;_
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>995</x>
      <y>380</y>
      <w>105</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;create&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;20.0;190.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>595</x>
      <y>440</y>
      <w>445</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>score::concurrency::DelayedTask
template=Clock, CallableType
--
Note: Not Copyable, Movable</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>995</x>
      <y>475</y>
      <w>105</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
&lt;&lt;create&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;20.0;190.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>435</y>
      <w>585</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>score::concurrency::DelayedTaskFactory
--
--
_template&lt;Clock, LocalCallableType, Arguments...&gt;_
_+ Make(score::cpp::pmr::memory_resource*, Executor&amp;, std::promise&lt;void&gt;&amp;&amp;, Clock::time_point, CallableType&amp;&amp;, Arguments&amp;&amp;...)_
_    : score::cpp::pmr::unique_ptr&lt;DelayedTask&lt;Clock&gt; &gt;_

_template&lt;Clock, LocalCallableType, Arguments...&gt;_
_+ MakeWithTaskResult(score::cpp::pmr::memory_resource*, Executor&amp;, std::promise&lt;void&gt;&amp;&amp;, Clock::time_point, CallableType&amp;&amp;, Arguments&amp;&amp;...)_
_    : std::pair&lt;TaskResult&lt;void&gt;, score::cpp::pmr::unique_ptr&lt;DelayedTask&lt;Clock&gt; &gt; &gt;_
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>690</x>
      <y>285</y>
      <w>200</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>template=Clock
score::concurrency::TimedTask
--
/+ GetNextExecutionPoint(): optional&lt;TimePoint&gt;/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>315</y>
      <w>240</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>460.0;10.0;460.0;40.0;10.0;40.0;10.0;150.0;90.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>110</y>
      <w>235</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>330.0;10.0;330.0;50.0;10.0;50.0;10.0;310.0;450.0;310.0;450.0;360.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>315</y>
      <w>240</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>460.0;10.0;460.0;40.0;10.0;40.0;10.0;330.0;90.0;330.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>130</x>
      <y>625</y>
      <w>385</w>
      <h>255</h>
    </coordinates>
    <panel_attributes>score::concurrency::TimedExecutor
--
# memory_resource_: score::cpp::pmr::memory_resource*
--
+ Executor(score::cpp::pmr::memory_resource*)
+ virtual ~Executor() noexcept = default

/# enqueue(score::cpp::pmr::unique_ptr&lt;TimedTask&gt; task): void/
/+ maxConcurrencyLevel() const noexcept: std::size_t/
/+ shutdownRequested() const noexcept: bool/
/+ shutdown() noexcept: void/

+ Post(score::cpp::pmr::unique_ptr&lt;TimedTask&gt; task): void

   template&lt;class CallableType, class... ArgumentTypes&gt;
+ Post(Duartion interval, CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): void

   template&lt;class CallableType, class... ArgumentTypes&gt;
+ Post(TimePoint execution_point, CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): void

  
    template&lt;class ExecutorType, class CallableType, class... ArgumentTypes&gt;
_# DoPost(ExecutorType&amp; executor, TimePoint execution_point, CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): void_

    template&lt;class ExecutorType, class CallableType, class... ArgumentTypes&gt;
_# DoPost(ExecutorType&amp; executor, TimePoint first_execution, Duration interval, CallableType&amp;&amp; callable, ArgumentTypes&amp;&amp;... arguments): void_
   
--
Notes:
By enforcing that CallableTypes first argument
is an score::cpp::stop_token, we can signal the user
that he needs to think abouth how his thread can
be stopped gracefully.

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>125</x>
      <y>925</y>
      <w>415</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>score::concurrency::ConcurrentTimedExecutor
--
- Work()
--
- executor_: unique_ptr&lt;Executor&gt;
- queue_: deque&lt;pair&lt;TimePoint, unique_ptr&lt;TimedTask&lt;Clock&gt;&gt;&gt;&gt;
- free_: set&lt;shared_ptr&lt;InterruptibleConditionalVariable&gt;&gt;
- waiting_: set&lt;pair&lt;TimePoint, shared_ptr&lt;InterruptibleConditionalVariable&gt;&gt;&gt;
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>875</y>
      <w>15</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>90</x>
      <y>170</y>
      <w>70</w>
      <h>800</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;10.0;10.0;1580.0;70.0;1580.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>300</y>
      <w>240</w>
      <h>335</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
enqueues</panel_attributes>
    <additional_attributes>10.0;650.0;10.0;10.0;460.0;10.0</additional_attributes>
  </element>
</diagram>
